1.ODEV -----------------------
1.SELECT title, description FROM film;
2.SELECT * FROM film WHERE length >60 AND length <75;
3.SELECT * FROM film WHERE rental_rate=0.99 AND replacement_cost = 12.99 OR replacement_cost= 28.99;
4.SELECT first_name, last_name FROM customer WHERE first_name= 'Mary';  ==   "Mary"	"Smith"
5.SELECT * FROM film WHERE NOT (length > 50 AND rental_rate=2.99 OR rental_rate= 4.99);

2. ODEV------------------------
1. SELECT * FROM film WHERE replacement_cost BETWEEN 12.99 AND 16.99;
2. SELECT first_name, last_name FROM actor WHERE first_name IN('Penelope', 'Nick', 'Ed');
3. SELECT * FROM film WHERE rental_rate IN (0.99, 2.99, 4.99) AND replacement_cost IN(12.99, 15.99, 28.99);

3. ODEV -----------------------
1. SELECT * FROM country WHERE country LIKE 'A%a';
2. SELECT * FROM country WHERE country LIKE '%_____n';
3.SELECT title FROM film WHERE title ILIKE '%t%t%t%t';
4. SELECT * FROM film WHERE title LIKE 'C%' AND length > 90 AND rental_rate = 2.99;

4. ODEV-------------------------
1. SELECT DISTINCT replacement_cost FROM film;
2. SELECT COUNT(DISTINCT replacement_cost) FROM film;
3. SELECT COUNT(title) as title, COUNT(rating) as rating FROM film WHERE (title LIKE 'T%') AND (rating= 'G');
4. SELECT COUNT(country) FROM country WHERE country LIKE '_____';
5. SELECT COUNT(city) FROM city WHERE city ILIKE '%r';

5. ODEV----------------------
1. SELECT * FROM film WHERE title LIKE '%n' ORDER BY length DESC LIMIT 5;
2. SELECT * FROM film WHERE title LIKE '%n' ORDER BY length OFFSET 5 LIMIT 5;
3. SELECT * FROM customer WHERE store_id=1 ORDER BY last_name DESC LIMIT 4;

6. ODEV-----------------
1.  SELECT AVG(rental_rate):: NUMERIC (10,3) FROM film;
2. SELECT COUNT(title) FROM film WHERE title LIKE 'C%';
3. SELECT MAX(length) FROM film WHERE rental_rate=0.99;
4. SELECT COUNT( DISTINCT replacement_cost) FROM film WHERE length > 150;

7. ODEV-------------------
1. SELECT rating, COUNT(*) from film GROUP BY rating;
2. SELECT replacement_cost, COUNT(replacement_cost) FROM film GROUP BY replacement_cost HAVING COUNT(replacement_cost)>50;
3. SELECT store_id, COUNT(*) FROM customer GROUP BY store_id;
4. SELECT country_id, Count(*) as sehir  FROM city GROUP BY(country_id) ORDER BY sehir DESC LIMIT 1;

8. ODEV-------------------
1. CREATE TABLE employee ( id INTEGER, name VARCHAR(50), brithday DATE, email VARCHAR(100));
2. insert into employee (id, name, birthday, email) values (1, 'Renaldo Flicker', '1962-08-03', 'rflicker0@howstuffworks.com');
3. UPDATE employee SET name = 'deneme1' WHERE id= 11;
4. DELETE FROM employee WHERE id>11;

9. ODEV -----------------------
1. SELECT city, country FROM city INNER JOIN country ON city.country_id = country.country_id;
2. SELECT payment_id, first_name, last_name FROM customer INNER JOIN payment ON customer.customer_id = payment.customer_id;
3. SELECT rental_id, first_name, last_name FROM customer INNER JOIN rental ON customer.customer_id = rental.customer_id; 

10. ÖDEV----------------------
1. SELECT city.city, country.country FROM city LEFT JOIN country ON city.country_id = country.country_id;
2. SELECT payment_id, first_name, last_name FROM customer RIGHT JOIN payment ON customer.customer_id = payment.customer_id;
3. SELECT rental.rental_id, customer.first_name, customer.last_name FROM customer FULL JOIN rental ON customer.customer_id = rental.customer_id;

11. ÖDEV --------------------
1. (SELECT first_name FROM actor ORDER BY first_name) UNION ALL (SELECT first_name FROM customer ORDER BY first_name);
2. (SELECT first_name FROM actor ORDER BY first_name) INTERSECT (SELECT first_name FROM customer ORDER BY first_name);
3. (SELECT first_name FROM actor ORDER BY first_name) EXCEPT (SELECT first_name FROM customer ORDER BY first_name);
4.(SELECT first_name FROM actor ORDER BY first_name) INTERSECT ALL (SELECT first_name FROM customer ORDER BY first_name);

12. ÖDEV--------------------
1. SELECT Count(*) FROM film WHERE length > (SELECT AVG(length) FROM film );
2. SELECT COUNT(*) FROM film WHERE rental_rate >= (SELECT MAX(rental_rate) FROM film);
3. SELECT * FROM film WHERE rental_rate = (SELECT MIN(rental_rate) FROM film ) and replacement_cost = (SELECT MIN(replacement_cost) FROM film );
4. SELECT customer_id, COUNT(customer_id), SUM(amount) as toplam FROM payment GROUP BY customer_id ORDER BY toplam DESC LIMIT 50 ;  
4. Diğer Alternatif ==> SELECT customer_id, COUNT(customer_id) as sayı, SUM(amount) as toplam FROM payment GROUP BY customer_id ORDER BY sayı DESC LIMIT 50 ;
